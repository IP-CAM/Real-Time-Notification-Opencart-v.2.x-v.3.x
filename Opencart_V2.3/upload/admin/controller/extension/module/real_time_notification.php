<?phpclass ControllerExtensionModuleRealTimeNotification extends Controller {		private $error = array();		public function index() {		// load all language variables		$data = $this->load->language('extension/module/real_time_notification');		$this->document->setTitle($this->language->get('heading_title'));		$this->load->model('setting/setting');		if (($this->request->server['REQUEST_METHOD'] == 'POST') && $this->validate()) {			$this->model_setting_setting->editSetting('real_time_notification', $this->request->post);			$this->session->data['success'] = $this->language->get('text_success');			if(!empty($this->request->post['save_and_stay'])) {				$this->response->redirect($this->url->link('extension/module/real_time_notification', 'token=' . $this->session->data['token'], true));			} else {				$this->response->redirect($this->url->link('marketplace/extension', 'token=' . $this->session->data['token'] . '&type=module', true));			}		}				if (isset($this->session->data['success'])) {			$data['success'] = $this->session->data['success'];			unset($this->session->data['success']);		} else {			$data['success'] = '';		}		if (isset($this->error['warning'])) {			$data['error_warning'] = $this->error['warning'];		} else {			$data['error_warning'] = '';		}		if (isset($this->error['delay'])) {			$data['error_delay'] = $this->error['delay'];		} else {			$data['error_delay'] = '';		}				$data['breadcrumbs'] = array();		$data['breadcrumbs'][] = array(			'text' => $this->language->get('text_home'),			'href' => $this->url->link('common/dashboard', 'token=' . $this->session->data['token'], true)		);		$data['breadcrumbs'][] = array(			'text' => $this->language->get('text_module'),			'href' => $this->url->link('extension/module', 'token=' . $this->session->data['token'], true)		);		if (!isset($this->request->get['module_id'])) {			$data['breadcrumbs'][] = array(				'text' => $this->language->get('heading_title'),				'href' => $this->url->link('extension/module/real_time_notification', 'token=' . $this->session->data['token'], true)			);		} else {			$data['breadcrumbs'][] = array(				'text' => $this->language->get('heading_title'),				'href' => $this->url->link('extension/module/real_time_notification', 'token=' . $this->session->data['token'] . '&module_id=' . $this->request->get['module_id'], true)			);		}		$data['action'] = $this->url->link('extension/module/real_time_notification', 'token=' . $this->session->data['token'], true);		$data['cancel'] = $this->url->link('marketplace/extension', 'token=' . $this->session->data['token'] . '&type=module', true);				if (isset($this->request->get['module_id']) && ($this->request->server['REQUEST_METHOD'] != 'POST')) {			$module_info = $this->model_setting_module->getModule($this->request->get['module_id']);		}				$data['token'] = $this->session->data['token'];		if (isset($this->request->post['real_time_notification_position'])) {			$data['real_time_notification_position'] = $this->request->post['real_time_notification_position'];		} else if($this->config->get('real_time_notification_position')){			$data['real_time_notification_position'] = $this->config->get('real_time_notification_position');		} else {			$data['real_time_notification_position'] = 'bottom-right'; // default		}		if (isset($this->request->post['real_time_notification_allow_dismiss'])) {			$data['real_time_notification_allow_dismiss'] = $this->request->post['real_time_notification_allow_dismiss'];		} else {			$data['real_time_notification_allow_dismiss'] = $this->config->get('real_time_notification_allow_dismiss');		}		if (isset($this->request->post['real_time_notification_pause_on_hover'])) {			$data['real_time_notification_pause_on_hover'] = $this->request->post['real_time_notification_pause_on_hover'];		} else {			$data['real_time_notification_pause_on_hover'] = $this->config->get('real_time_notification_pause_on_hover');		}		if (isset($this->request->post['real_time_notification_delay'])) {			$data['real_time_notification_delay'] = $this->request->post['real_time_notification_delay'];		} else if($this->config->get('real_time_notification_delay')){			$data['real_time_notification_delay'] = $this->config->get('real_time_notification_delay');		} else {			$data['real_time_notification_delay'] = 5000; // default		}		if (isset($this->request->post['real_time_notification_newest_on_top'])) {			$data['real_time_notification_newest_on_top'] = $this->request->post['real_time_notification_newest_on_top'];		}  else if($this->config->get('real_time_notification_newest_on_top')){			$data['real_time_notification_newest_on_top'] = $this->config->get('real_time_notification_newest_on_top');		} else {			$data['real_time_notification_newest_on_top'] = true; // default		}		if (isset($this->request->post['real_time_notification_progress_bar'])) {			$data['real_time_notification_progress_bar'] = $this->request->post['real_time_notification_progress_bar'];		} else if($this->config->get('real_time_notification_progress_bar')){			$data['real_time_notification_progress_bar'] = $this->config->get('real_time_notification_progress_bar');		} else {			$data['real_time_notification_progress_bar'] = true; // default		}		if (isset($this->request->post['real_time_notification_order_status'])) {			$data['real_time_notification_order_status'] = $this->request->post['real_time_notification_order_status'];		} else {			$data['real_time_notification_order_status'] = $this->config->get('real_time_notification_order_status');		}				if (isset($this->request->post['real_time_notification_status'])) {			$data['real_time_notification_status'] = $this->request->post['real_time_notification_status'];		} else {			$data['real_time_notification_status'] = $this->config->get('real_time_notification_status');		}		$this->document->addScript('view/javascript/bootstrap-toggle/js/bootstrap-toggle.min.js');		$this->document->addStyle('view/javascript/bootstrap-toggle/css/bootstrap-toggle.css');		$this->document->addStyle('view/stylesheet/real_time_notification.css');		$this->load->model('localisation/order_status');		$data['order_statuses'] = $this->model_localisation_order_status->getOrderStatuses();				$data['header'] = $this->load->controller('common/header');		$data['column_left'] = $this->load->controller('common/column_left');		$data['footer'] = $this->load->controller('common/footer');		$this->response->setOutput($this->load->view('extension/module/real_time_notification', $data));	}	protected function validate() {		if (!$this->user->hasPermission('modify', 'extension/module/real_time_notification')) {			$this->error['warning'] = $this->language->get('error_permission');		}		if ((int)$this->request->post['real_time_notification_delay'] < 500 || (int)$this->request->post['real_time_notification_delay'] > 10000) {			$this->error['delay'] = $this->language->get('error_delay');		}		return !$this->error;	}}